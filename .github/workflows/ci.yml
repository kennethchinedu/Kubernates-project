name: ci

on:
  push:
    branches:
      - 'main'

jobs:

  build-push-image:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
    #removing helm chart archives
      - name: Clean up chart archives
        run: rm -f *.tgz

      #Running security scans on the codebase (NIST, FEDRAMP, OWASP, etc.)
      - name: Scan codebase with trivy 
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output:  'trivy-code-results.sarif' 
          severity: 'CRITICAL, HIGH'
          # exit-code: '1' # Fail the action if vulnerabilities are found
      

      #scanning the IaC files (Kubernetes)
      - name: Scan Kubernetes YAML folder
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          hide-progress: true
          # input: './Helm/'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          # exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload codebase scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-code-results.sarif' 
          category: 'trivy-code'

      - name: Upload config scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-config-results.sarif' 
          category: 'trivy-config'

      #Setting up the environment variables for the backend and frontend applications
      - name: Setting up env 
        run: |
          echo "Setting up environment variables"
          echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> next_js_aws_devop_project/backend/.env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >>  next_js_aws_devop_project/backend/.env
          echo "PORT=${{ secrets.PORT}}" >>  next_js_aws_devop_project/backend/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >>  next_js_aws_devop_project/backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >>  next_js_aws_devop_project/backend/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >>  next_js_aws_devop_project/backend/.env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >>  next_js_aws_devop_project/backend/.env

      #Using makefile to run build and push images 
      - name: Building backend image
        run: |
          echo "Building backend image using Makefile"
          make build_backend_image

      - name: Building frontend image
        run: |
          echo "Building frontend image using Makefile"
          make build_frontend_image

      - name: View docker images
        run: |
          echo "Listing Docker images"
          docker images

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      #getting the current date for the image tag
      - name: Set current date as env variable
        run: | 
          echo "NOW=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo ${{ env.NOW }}

      # - name: Debug image ref
      #   run: echo "Scanning ${{ secrets.BACKEND_IMAGE }}:latest"

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: .
          format: 'table'
          # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'table'


#This is the CI workflow for building and pushing Docker images, scanning for vulnerabilities, and deploying to Kubernetes. 
      # - name: Run Trivy vulnerability scanner in docker mode
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #    image-ref: '${{ secrets.BACKEND_IMAGE }}:latest'
      #    format: 'template'
      #    template: '@/contrib/sarif.tpl'
      #    output: 'trivy-results-docker.sarif'
      #    severity: 'CRITICAL'


      
     # Scanning the image for vulnerabilities using trivy
      #  Scanning backend image

      # - name: Scan backend image for vulnerabilities
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: 'docker.io/${{secrets.BACKEND_IMAGE}}:${NOW}'
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL,HIGH'
      #     ignore-unfixed: true
      #     #exit-code: '1' # Fail the action if vulnerabilities are found
      #     scan-type: 'image'  

      #  Scanning frontend image
      # - name: Scan frontend image for vulnerabilities
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: 'docker.io/${{secrets.FRONTEND_IMAGE}}:${NOW}'
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL,HIGH'
      #     ignore-unfixed: true
      #     #exit-code: '1' # Fail the action if vulnerabilities are found
      #     scan-type: 'image'   

      # - name: Pushing backend image to DockerHub
      #   run: |
      #     echo "Pushing backend image to DockerHub"
      #     # make docker_login
      #     make docker_push 
     
    
          
      
      # - name: Set up Docker Buildx for demo
      #   uses: docker/setup-buildx-action@v2
      # - name: Login to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_TOKEN }}
      
      # - name: show pwd
      #   run: |
      #     pwd
      #     ls -la next_js_aws_devop_project

        
          
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3 

      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ./charido-landing-page/charido-landing-page
      #     file: ./charido-landing-page/charido-landing-page/Dockerfile
      #     push: true
      #     tags: app:latest 